package hu.elte.txtuml.examples.performance_test.xmodel;

class Test {				
	public void test() {
		A a = create(A, 10000);
		start(a);
	}
}

class A {
	
	int remainingCycles;
	int numForward;
	
	public A(int numCycles) {
		remainingCycles = numCycles;
		numForward = 0;
	}
	
	initial init;
	state A1 {
		entry {
			if (remainingCycles-- <= 0) {
				for (B b : A.this->(AB.b)) {
					unlink(AB.a, A.this, AB.b, b);
				}
				delete A.this;
			}
		}
	};
	state A2;
	state A3;
	state A4;
	
	private void createChild() {
		// B b = new B();
		B b = new B();
		link(AB.a, this, AB.b, b);
		start(b);
	}
	
	void childTerminated() {
		send new Backward() to this;
	}
	
	transition init_A1 {
		from init;
		to A1;
		effect {
			// log("initial transition");
			numForward++;
			send new Forward(numForward) to A.this;
		}
	}
	
	// forward
	
	transition A1_A2 {
		from A1;
		to A2;
		trigger Forward;
		effect {
			// log("A1->A2");
			Forward sig = trigger;
			if (sig.nf % 4 == 0) {
				createChild();
			}
			if (!A.this->(AB.b).isEmpty()) {
				send new Forward(0) to A.this->(AB.b).selectAny();
			}
			numForward++;
			send new Forward(numForward) to A.this;
		}
	}
	
	transition A2_A3 {
		from A2;
		to A3;
		trigger Forward;
		effect {
			// log("A2->A3");
			Forward sig = trigger;
			if (sig.nf % 4 == 0) {
				createChild();
			}
			if (!A.this->(AB.b).isEmpty()) {
				send new Forward(0) to A.this->(AB.b).selectAny();
			}
			numForward++;
			send new Forward(numForward) to A.this;
		}
	}
	
	transition A3_A4 {
		from A3;
		to A4;
		trigger Forward;
		effect {
			// log("A3->A4");
			Forward sig = trigger;
			if (sig.nf % 4 == 0) {
				createChild();
			}
			if (!A.this->(AB.b).isEmpty()) {
				send new Forward(0) to A.this->(AB.b).selectAny();
			}
			numForward++;
			send new Forward(numForward) to A.this;
		}
	}
			
	transition A4_A1 {
		from A4;
		to A1;
		trigger Forward;
		effect {
			// log("A4->A1");
			Forward sig = trigger;
			if (sig.nf % 4 == 0) {
				createChild();
			}
			if (!A.this->(AB.b).isEmpty()) {
				send new Forward(0) to A.this->(AB.b).selectAny();
			}
			numForward++;
			send new Forward(numForward) to A.this;
		}
	}
	
	// backward
	
	transition A1_A4 {
		from A1;
		to A4;
		trigger Backward;
		effect {
		}
	}
	
	transition A2_A1 {
		from A2;
		to A1;
		trigger Backward;
		effect {
		}
	}
	
	transition A3_A2 {
		from A3;
		to A2;
		trigger Backward;
		effect {
		}
	}
	
	transition A4_A3 {
		from A4;
		to A3;
		trigger Backward;
		effect {
		}
	}
	
}

class B {
	initial init;
	state B1;
	state B2;
	state B3;
	state B4;
	state finalstate {
		entry {
			if (B.this->(AB.a).isEmpty()) {
			} else {
				A a = B.this->(AB.a).selectAny();
				unlink(AB.a, a, AB.b, B.this);
				a.childTerminated();
			}
			delete B.this;
		}
	}
	
	transition init_B1 {
		from init;
		to B1;
	}
	
	transition B1_B2 {
		from B1;
		to B2;
		trigger Forward;
	}
	
	transition B2_B3 {
		from B2;
		to B3;
		trigger Forward;
	}
	
	transition B3_B4 {
		from B3;
		to B4;
		trigger Forward;
	}
			
	transition B4_finalstate {
		from B4;
		to finalstate;
		trigger Forward;
	}
	
}

association AB {
	public 1 A a;
	public * B b;
}

signal Forward {
	int nf;
}

signal Backward;
