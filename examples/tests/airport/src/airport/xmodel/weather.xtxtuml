package airport.xmodel;

import hu.elte.txtuml.api.stdlib.timers.Timer
import hu.elte.txtuml.api.model.Collection
import hu.elte.txtuml.api.model.One;
import hu.elte.txtuml.api.model.Any;

class Weather {
	private int temperature;
	private int wind; // 0..10
					  // 0 - no wind
	private int rain; // 0..10
	
	// Constructor
	Weather(int t, int w, int r) {
		setWeather(t, w, r);
	}
	
	// txtUML
	initial Init;
	state Ready;
	
	transition Initial {
		from Init;
		to Ready;
		effect {
			//System.err.println("The weather reporting is initialized");
			send new SignalWeatherAutoSending() to this;
		}
	}
	
	transition AutoSending {
		from Ready;
		to Ready;
		trigger SignalWeatherAutoSending;
		effect {
			//System.err.println(temperature + " " + rain + " " + wind);	
			
			//Collection<Tower> allTowers = Weather.this->TowerWeatherUsage::theTower;
			Any<Tower> allTowers = Weather.this->(TowerWeatherUsage.theTower);
		
			for(Tower t : allTowers) {
				send new SignalSendTheWeatherValues(temperature, wind, rain) to t;
			}
			
			Timer.start(new SignalWeatherAutoSending(), this, 2000); // It send a signal in every 30 sec
		}
	}
	/* 
	transition SetWeather {
		from Ready;
		to Ready;
		trigger setNewWeather;
		effect {
			setWeather(sigdata.temperature, sigdata.wind, sigdata.rain);
		}
	}*/
	
	// Modify the weather values
		public void setWeather(int t, int w, int r) {
			temperature = t;
			

			if(w < 0) {
				wind = 0;
			} else {
				wind = w;
			}
			
			if(w > 10) {
				wind = 10;
			}
			
			
			if(r < 0) {
				rain = 0;
			} else {
				rain = r;
			}
			
			if(r > 10) {
				rain = 10;
			}
		}
		
	
	// Getters
		public int getTemperature() {
			return temperature;	
		}
		
		public int getWind() {
			return wind;	
		}
		
		public int getRain() {
			return rain;	
		}
}
