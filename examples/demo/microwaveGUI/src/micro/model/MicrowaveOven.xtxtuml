package micro.model;

import hu.elte.txtuml.api.stdlib.timers.Timer;
import micro.main.GUI;
import micro.main.GUIInterface;
import micro.model.MicrowaveOven.Cooking;
import micro.model.MicrowaveOven.FoodInOut;
import micro.model.MicrowaveOven.Init;
import micro.model.MicrowaveOven.Interrupted;
import micro.model.MicrowaveOven.Ready;

signal DoorOpened;
signal DoorClosed;
signal Start;
signal Stop;
signal Timeout;

class MicrowaveOven {
	GUIInterface gui;
	Timer timer;
	int remainingTime;
	
	MicrowaveOven() {
		gui = new GUI();
		Lamp lamp = create(Lamp);
		link(LampOfOven.oven, this, LampOfOven.lamp, lamp);
		start(lamp);
		Magnetron magnetron = create(Magnetron);
		link(MagnetronOfOven.oven, this, MagnetronOfOven.magnetron, magnetron);		
		start(magnetron);
	}
	
	initial Init;
	state Ready; 
	state FoodInOut;

	state Cooking {
		entry {
			log("Cooking started.");
			Lamp lamp = this->(LampOfOven.lamp).selectAny();
			send new LampOn() to lamp;
			Magnetron magnetron = this->(MagnetronOfOven.magnetron).selectAny();
			send new MagnetronOn() to magnetron; 
		}
		exit {
			log("Cooking stopped.");
			Magnetron magnetron = this->(MagnetronOfOven.magnetron).selectAny();
			send new MagnetronOff() to magnetron;
			Lamp lamp = this->(LampOfOven.lamp).selectAny();
			send new LampOff() to lamp;
		}
	}

	state Interrupted;
	
	transition Initialize {
		from Init;
		to Ready;
	}
		
	transition Open {
		from Ready;
		to FoodInOut;
		trigger DoorOpened;
	}
	
	transition Close {
		from FoodInOut;
		to Ready;
		trigger DoorClosed;
	}

	transition StartCooking {
		from Ready;
		to Cooking;
		trigger Start;
		effect {
			timer = Timer.start(this, new Stop(), 30000);
		}
	}

	transition Interrupt {
		from Cooking;
		to Interrupted;
		trigger DoorOpened;
		effect {
			remainingTime = timer.query();
			timer.cancel();
		}
	}
	
	transition Resume {
		from Interrupted;
		to Cooking;
		trigger DoorClosed;
		effect {
			timer = Timer.start(this, new Stop(), remainingTime);
		}
	}
	
	transition StopCooking {
		from Cooking;
		to Ready;
		trigger Stop;
		effect {
			timer.cancel();
		}
	}
	
	transition Finish {
		from Cooking;
		to Ready;
		trigger Timeout;
	}
	
	transition Cancel {
		from Interrupted;
		to FoodInOut;
		trigger Stop;
	}
}

composition LampOfOven {
	container MicrowaveOven oven;
	1 Lamp lamp;
}

composition MagnetronOfOven {
	container MicrowaveOven oven;
	1 Magnetron magnetron;
}

