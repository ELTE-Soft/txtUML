package pingpong.x.model;

import pingpong.x.model.signals.BallIfc;
import pingpong.x.model.signals.HitOrMissIfc;
import pingpong.x.model.associations.PlayerOwnsRacket;
import pingpong.x.model.connectors.PlayerUsesRacket;
import pingpong.x.model.signals.HitTheBall;
import pingpong.x.model.signals.MissedTheBall;
import pingpong.x.model.signals.Ball;
import pingpong.x.model.connectors.PlayerHitsOrMisses;

class Player {

	private String name;

	port BallAtPlayerPort {
		required BallIfc;
		provided BallIfc;
	}

	port ShoutPort {
		required HitOrMissIfc;
	}

	public Player(String name) {
		this.name = name;

		Racket racket = create(Racket);
		link(PlayerOwnsRacket.player, Player.this, PlayerOwnsRacket.racket, racket);
		connect(this->(Player.BallAtPlayerPort), PlayerUsesRacket.racket,
				racket->(Racket.BallAtRacketPort));
		connect(this->(Player.ShoutPort), PlayerHitsOrMisses.withRacket, racket->(Racket.HitOrMissPort));

		start(racket);
	}

	initial Init;

	state Waiting;

	transition Initialize {
		from Init;
		to Waiting;
	}

	transition ShoutAfterHittingTheBall {
		from Waiting;
		to Waiting;
		trigger HitTheBall;
		effect {
			log(name + ": \"HIT!\"");			
		}
	}

	transition ShoutAfterMissingTheBall {
		from Waiting;
		to Waiting;
		trigger MissedTheBall;
		effect {
			log(name + ": \"MISS! I lost...\"");			
		}
	}

	transition Serve {
		from Waiting;
		to Waiting;
		trigger Ball;
		effect {
			log(name + ": \"I'll serve now...!\"");
			send trigger to this->(PlayerOwnsRacket.racket).one();
		}
	}	
}

