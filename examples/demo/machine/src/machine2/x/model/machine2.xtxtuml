package machine2.x.model;

// classes

class Machine {
	int tasksToDo;

	Machine(int tasksToDo) {
		this.tasksToDo = tasksToDo;
	}

	initial Init;

	state Off {
		entry {
			log("\tMachine enters state: 'off'");
		}

		exit {
			log("\tMachine exits state: 'off'");
		}
	}

	composite On {
		entry {
			log("\tMachine enters state: 'on'");
		}

		exit {
			log("\tMachine exits state: 'on'");
		}

		initial Init;

		state Active {
			entry {
				log("\tMachine enters state: 'active'");
				log("\tMachine: tasks to do: " + Machine.this.tasksToDo);
			}

			exit {
				log("\tMachine exits state: 'active'");
			}
		}
		
		transition Initialize {
			from Init;
			to Active;
		}

		transition DoActivity {
			from Active;
			to Active;
			trigger DoTasks;

			effect {
				DoTasks doTasks = trigger;
				Machine.this.tasksToDo -= doTasks.count;
				log("\tMachine: becoming active...");
			}
			
			guard(Machine.this.tasksToDo > 0);
		}
		
	}

	transition Initialize {
		from Init;
		to Off;
		effect {
			log("\tMachine: initializing...");
		}
	}

	transition SwitchOn {
		from Off;
		to On;
		trigger ButtonPress;

		effect {
			log("\tMachine: switching on...");
		}
	}

	transition SwitchOff {
		from On;
		to Off;
		trigger ButtonPress;
		
		effect {
			log("\tMachine: switching off...");
		}

		guard(Machine.this.tasksToDo <= 0);
	}
}

class User {
	initial Init;
	state Ready;
	
	transition Initialize {
		from Init;
		to Ready;

		effect {
			log("\tUser: initializing...");				
		}
	}

	transition Working {
		from Ready;
		to Ready;
		trigger DoYourWork;
		
		effect {
			log("\tUser: working...");
			doWork();
		}
	}
	
	void doWork() {
		log("\tUser: starting to work...");

		Machine myMachine = User.this->(Usage.usedMachine).one();
		
		send new ButtonPress() to myMachine;
		// Switching the machine on.
		
		send new ButtonPress() to myMachine;
		// Trying to switch it off but fails because of the guard.

		send new DoTasks(1) to myMachine;
		// The machine becomes active and decreases its tasks-to-do count
		// by 1.

		send new ButtonPress() to myMachine;
		// Trying to switch it off but fails again.
		
		send new DoTasks(1) to myMachine;
		// The machine becomes active again and decreases its tasks-to-do
		// count by 1.

		send new ButtonPress() to myMachine;
		// Trying to switch it off but fails again.

		send new DoTasks(1) to myMachine;
		// This event has no effect, the machine is switched off.

		log("\tUser: work finished...");
	}
}

// associations

association Usage {
	1 Machine usedMachine;
	hidden * User userOfMachine;
}

// signals

signal ButtonPress;
signal DoTasks {
	int count;
}

signal DoYourWork;
