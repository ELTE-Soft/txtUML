package producer_consumer.x.model;

signal DoWork;
signal Acknowledgement;

collection of 0..* as ConsumerCollection;

class Producer {
	int toProduce;
	public Producer(int num) {
		toProduce = num;
	}
	
	Item produce() {
		this.toProduce--;
		send new DoWork() to Producer.this;
		return new Item();
	}
	
	initial Init;
	state Active;
	state Passive {
		entry {
			Storage storage = Producer.this->(Production.storage).one();
			unlink Producer.this, storage via Production;
			delete Producer.this;
		}
	}
	
	transition Initialize {
		from Init;
		to Active;
		effect {
			send new DoWork() to Producer.this;
		}
	}
	
	transition DoOffer {
		from Active;
		to Active;
		trigger DoWork;
		guard (Producer.this.toProduce > 0);
		effect {
			Storage storage = Producer.this->(Production.storage).one();
			link Producer.this, storage via Offer;
			send new OfferNotification() to storage;
		}
	}
	
	transition Stop {
		from Active;
		to Passive;
		trigger DoWork;
		guard (Producer.this.toProduce <= 0);
	}
}

class Consumer {
	int toConsume;
	public Consumer(int toConsume) {
		this.toConsume = toConsume;
	}
	
	void consume(Item item) {
		toConsume--;
		send new DoWork() to Consumer.this;
	}
	
	initial Init;
	state Active;
	state Passive {
		entry {
			Storage storage = Consumer.this->(Consumption.storage).one();
			unlink Consumer.this, storage via Consumption;
			delete Consumer.this;
		}
	}
	
	transition Initialize {
		from Init;
		to Active;
		effect {
			send new DoWork() to Consumer.this;
		}
	}
	
	transition DoRequest {
		from Active;
		to Active;
		trigger DoWork;
		guard (Consumer.this.toConsume > 0)
		effect {
			Storage storage = Consumer.this->(Consumption.storage).one();
			link storage, Consumer.this via Request;
			send new RequestNotification() to storage;
		}
	}
	
	transition Stop {
		from Active;
		to Passive;
		trigger DoWork;
		guard (Consumer.this.toConsume <= 0);
	}
}

signal OfferNotification;
signal RequestNotification;

class Storage {
	int capacity;
	
	public Storage(int capacity) {
		this.capacity = capacity;
	}
	
	initial Init;
	state Working;
	
	transition Initialize {
		from Init;
		to Working;
	}
	
	transition CanAccept {
		from Working;
		to Working;
		trigger OfferNotification;
		guard(Storage.this->(InStore.item).size() < capacity);
		effect {
			Producer producer = Storage.this->(Offer.producer).one();
			unlink producer, Storage.this via Offer;
			Item item = producer.produce();
			link Storage.this, item via InStore;
		}
	}
	
	transition CannotAccept {
		from Working;
		to Working;
		trigger OfferNotification;
		guard(Storage.this->(InStore.item).size() >= capacity);
		effect {
			// postpone the offer
			send new OfferNotification() to Storage.this;
		}
	}

	transition CanServe {
		from Working;
		to Working;
		trigger RequestNotification;
		guard(Storage.this->(InStore.item).size() > 0);
		effect {
			Consumer consumer = Storage.this->(Request.consumer).one();
			unlink this, consumer via Request;
			Item item = Storage.this->(InStore.item).one();
			unlink Storage.this, item via InStore;
			consumer.consume(item);
		}
	}
	
	transition CannotServe {
		from Working;
		to Working;
		trigger RequestNotification;
		guard(Storage.this->(InStore.item).size() <= 0);
		effect {
			// postpone the request
			send new RequestNotification() to Storage.this;
		}
	}
	
}

class Item;

association Production {
	* Producer producer;
	1 Storage storage;
}

association Offer {
	* Producer producer;
	0..1 Storage storage;
}

association Consumption {
	1 Storage storage;
	* Consumer consumer;
}

association Request {
	0..1 Storage storage;
	* Consumer consumer;
}

association InStore {
	* Item item;
	0..1 Storage storage;
}

