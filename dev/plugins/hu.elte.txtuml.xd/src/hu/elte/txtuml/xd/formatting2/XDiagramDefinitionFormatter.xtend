/*
 * generated by Xtext 2.10.0
 */
package hu.elte.txtuml.xd.formatting2

import com.google.inject.Inject
import hu.elte.txtuml.xd.services.XDiagramDefinitionGrammarAccess
import hu.elte.txtuml.xd.xDiagramDefinition.ArgumentExpression
import hu.elte.txtuml.xd.xDiagramDefinition.ArgumentExpressionList
import hu.elte.txtuml.xd.xDiagramDefinition.BinaryIdentifierInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.BinaryListInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.DiagramSignature
import hu.elte.txtuml.xd.xDiagramDefinition.DiamondInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.GroupInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.Instruction
import hu.elte.txtuml.xd.xDiagramDefinition.Model
import hu.elte.txtuml.xd.xDiagramDefinition.PackageDeclaration
import hu.elte.txtuml.xd.xDiagramDefinition.PhantomInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.PriorityInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.TypeExpression
import hu.elte.txtuml.xd.xDiagramDefinition.TypeExpressionList
import hu.elte.txtuml.xd.xDiagramDefinition.UnaryListInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.UnaryNumberInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.WrappedArgumentExpressionList
import hu.elte.txtuml.xd.xDiagramDefinition.WrappedTypeExpression
import hu.elte.txtuml.xd.xDiagramDefinition.WrappedTypeExpressionList
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter

class XDiagramDefinitionFormatter extends XbaseFormatter {

	@Inject extension XDiagramDefinitionGrammarAccess

	def dispatch void format(DiagramSignature it, extension IFormattableDocument document) {
		regionFor().keyword("for").prepend[oneSpace].append[oneSpace];
		regionFor().keyword("class-diagram").prepend[noSpace].append[oneSpace];
		regionFor().keyword("state-machine-diagram").prepend[noSpace].append[oneSpace];
	}

	def dispatch void format(PackageDeclaration it, extension IFormattableDocument document) {
		regionFor().keyword(";").prepend[noSpace].append[newLine];
	}

	def dispatch void format(Model it, extension IFormattableDocument document) {
		regionFor().keyword("{").prepend[oneSpace].append[newLine];
		interior(regionFor.keyword('{'), regionFor.keyword('}'), [indent])
		regionFor().keyword("}").prepend[newLine].append[noSpace];
		format(package, document);
		format(imports, document);
		format(signature, document);
		instructions.forEach[instruction|format(instruction, document)];
	}

	def dispatch void format(Instruction it, extension IFormattableDocument document) {
		regionFor().keyword(";").prepend[noSpace].append[newLine];
		format(wrapped, document);
	}

	def dispatch void format(BinaryIdentifierInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		format(^val);
		format(of);
	}

	def dispatch void format(BinaryListInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		if (linkEnd != null) {
			regionFor.keyword(linkEnd).prepend[oneSpace].append[oneSpace];
		}
		format(^val);
		format(of);
	}

	def dispatch void format(PhantomInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
	}

	def dispatch void format(UnaryListInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		format(^val);
	}

	def dispatch void format(GroupInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		format(^val);
		if (align != null) {
			regionFor.keyword(align).prepend[oneSpace].append[noSpace];
		}
	}

	def dispatch void format(UnaryNumberInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		format(^val);
	}

	def dispatch void format(DiamondInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		format(args);
	}

	def dispatch void format(PriorityInstruction it, extension IFormattableDocument document) {
		regionFor.keyword(op).prepend[oneSpace].append[oneSpace];
		format(^val);
		format(prior);
	}

	def dispatch void format(WrappedTypeExpressionList it, extension IFormattableDocument document) {
		regionFor.keyword("{").prepend[oneSpace].append[oneSpace];
		regionFor.keyword("}").prepend[oneSpace]
		format(wrapped);
	}

	def dispatch void format(WrappedTypeExpression it, extension IFormattableDocument document) {
		regionFor.keyword("{").prepend[oneSpace].append[oneSpace];
		regionFor.keyword("}").prepend[oneSpace]
		format(wrapped);
	}

	def dispatch void format(WrappedArgumentExpressionList it, extension IFormattableDocument document) {
		regionFor.keyword("{").prepend[oneSpace].append[oneSpace];
		regionFor.keyword("}").prepend[oneSpace]
		format(wrapped);
	}

	def dispatch void format(TypeExpressionList it, extension IFormattableDocument document) {
		regionFor.keywords(",").forEach[prepend[noSpace].append[oneSpace]];
		it.expressions.forEach[exp|format(exp, document)]
	}

	def dispatch void format(TypeExpression it, extension IFormattableDocument document) {
	}

	def dispatch void format(ArgumentExpressionList it, extension IFormattableDocument document) {
		regionFor.keywords(",").forEach[prepend[noSpace].append[oneSpace]];
		it.expressions.forEach[exp|format(exp, document)]
	}

	def dispatch void format(ArgumentExpression it, extension IFormattableDocument document) {
		regionFor.keyword(":").prepend[noSpace].append[oneSpace];
	}
}
