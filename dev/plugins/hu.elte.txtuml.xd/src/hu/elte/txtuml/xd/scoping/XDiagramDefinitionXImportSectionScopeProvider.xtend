/*
 * generated by Xtext 2.10.0
 */
package hu.elte.txtuml.xd.scoping

import hu.elte.txtuml.xd.xDiagramDefinition.XDDiagram
import hu.elte.txtuml.xd.xDiagramDefinition.XDModel
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.impl.ImportNormalizer
import org.eclipse.xtext.xbase.scoping.NestedTypeAwareImportNormalizerWithDotSeparator
import org.eclipse.xtext.xbase.scoping.XImportSectionNamespaceScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
 
class XDiagramDefinitionXImportSectionScopeProvider extends XImportSectionNamespaceScopeProvider {

	override protected getImportedNamespaceResolvers(EObject context, boolean ignoreCase) {
		if (context instanceof XDDiagram) {
			return (context as XDDiagram).buildDiagramImports(ignoreCase);
		}
		return super.getImportedNamespaceResolvers(context, ignoreCase);
	}

	def private ImportNormalizer[] buildDiagramImports(XDDiagram diagram, boolean ignoreCase) {
		val nestedClasses = diagram.createOwnNestedClassImport(ignoreCase);
		val modelClasses = diagram.createModelNestedClassImport(ignoreCase);

		if (modelClasses != null) {
			return #[nestedClasses, modelClasses]
		} else {
			return #[nestedClasses]

		}
	}

	private def createOwnNestedClassImport(XDDiagram diagram, boolean ignoreCase) {
		val modelElement = diagram.eContainer as XDModel;
		val diagramClass = if (modelElement.hasPackage()) {
				modelElement.package.name + '.' + diagram.name
			} else {
				diagram.name
			};
		return createImport(QualifiedName.create(diagramClass.split("\\.")), true, ignoreCase);
	}

	private def createModelNestedClassImport(XDDiagram diagram, boolean ignoreCase) {
		// CHECKME: is it needed to implicitly import the generic type arguments nested classes ???
		// also it causes xtext "cyclic linking detected" error
		
//		if (diagram.genArg == null) return #[];
//		println("qnole-" + diagram.genArg.qualifiedNameOfLocalElement);
//						 createImport(qualifiedNameProvider.getFullyQualifiedName(diagram.genArg), true, ignoreCase);

		return null as ImportNormalizer;
	}

	private def boolean hasPackage(XDModel modelElement) {
		modelElement.package != null && modelElement.package.name != null && modelElement.package.name != ""
	}

	override protected getImplicitImports(boolean ignoreCase) {
		#[]
	}

	def private ImportNormalizer createImport(QualifiedName name, boolean wildcard, boolean ignoreCase) {
		new NestedTypeAwareImportNormalizerWithDotSeparator(name, wildcard, ignoreCase);
	}
}
