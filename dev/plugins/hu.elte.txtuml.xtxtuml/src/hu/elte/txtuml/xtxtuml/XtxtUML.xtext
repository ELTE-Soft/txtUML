grammar hu.elte.txtuml.xtxtuml.XtxtUML with org.eclipse.xtext.xbase.Xbase
generate xtxtUML "http://www.elte.hu/txtuml/xtxtuml/XtxtUML"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype

// Start rule

TUFile :
	TUModelDeclaration |
	(('package' name=QualifiedName ';'?)?
	importSection=XImportSection?
	elements+=TUModelElement*)
;

TUModelDeclaration :
	{TUModelDeclaration}
	model='model-package' name=QualifiedName ('as' modelName=STRING)? semiColon=';'?
		// feature 'semiColon' is required because of the buggy formatter2 API
;

// Model level

TUModelElement
	: TUExecution
	| TUSignal
	| TUClass
	| TUEnumeration
	| TUAssociation
	| TUInterface
	| TUConnector
;

TUExecution :
	'execution' name=ValidID
		body=XBlockExpression ';'?
;

TUSignal :
	'signal' name=ValidID ('{'
		attributes+=TUSignalAttribute*
	'}' ';'? | ';')
;

TUClass : 
	'class' name=ValidID ('extends' superClass=[TUClass|QualifiedName])? ('{'
		members+=TUClassMember*
	'}' ';'? | ';')
;

TUEnumeration :
	'enum' name=ValidID ('{'
		(literals+=TUEnumerationLiteral (',' literals+=TUEnumerationLiteral)*)? 
	'}' ';'? | ';')
;

TUEnumerationLiteral :
	name=ValidID
;

TUAssociation returns TUAssociation:
	({TUAssociation} 'association' | {TUComposition} 'composition') name=ValidID '{'
		ends+=TUAssociationEnd*
	'}' ';'?
;

TUInterface :
	'interface' name=ValidID '{'
		receptions+=TUReception*
	'}' ';'?
;

TUReception :
	'reception' signal=[TUSignal|QualifiedName] ';'
;

TUConnector :
	('connector' | delegation?='delegation') name=ValidID '{'
		ends+=TUConnectorEnd*
	'}' ';'?
;

TUConnectorEnd :
	role=[TUAssociationEnd|QualifiedName] '->' port=[TUPort|QualifiedName] name=ValidID ';'
;

// Inner element level

// Signal- and Class-related

TUSignalAttribute :
	visibility=TUVisibility? type=JvmTypeReference name=ValidID ';'
;

TUClassMember
	: TUConstructor
	| TUAttributeOrOperationDeclarationPrefix (
		{TUAttribute.prefix=current} name=ValidID ';' |
		{TUOperation.prefix=current} name=ValidID '(' (parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
			body=XBlockExpression ';'?
	  )
	| TUState
	| TUTransition
	| TUPort
;

/*
 * The inferred <code>EClass</code> is used in TUClassPropertyAccessExpression.
 */
TUClassProperty :
	TUPort | TUAssociationEnd
;

TUConstructor :
	visibility=TUVisibility? name=ValidID '(' (parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
		body=XBlockExpression ';'?
;

TUAttributeOrOperationDeclarationPrefix :
	visibility=TUVisibility? type=JvmTypeReference
;

TUState :
	type=TUStateType name=ValidID ('{'
		members+=TUStateMember* 
	'}' ';'? | ';')
;

enum TUStateType :
	PLAIN = 'state' | INITIAL = 'initial' | CHOICE = 'choice' | COMPOSITE = 'composite'
;

TUStateMember :
	TUState | TUEntryOrExitActivity | TUTransition
;

/*
 * The inferred <code>EClass</code> is used in unit tests.
 */
TUClassOrStateMember :
	TUClassMember | TUStateMember
;

TUEntryOrExitActivity :
	(entry?='entry' | exit='exit') // feature 'exit' is for error markers
		body=XBlockExpression ';'?
;

TUTransition :
	'transition' name=ValidID '{'
		members+=TUTransitionMember*
	'}' ';'?
;

TUTransitionMember
	: TUTransitionTrigger
	| TUTransitionVertex
	| TUTransitionEffect
	| TUTransitionGuard
	| TUTransitionPort
;

TUTransitionTrigger :
	triggerKeyword='trigger' trigger=[TUSignal|QualifiedName] ';'
		// feature 'triggerKeyword' is for error markers
;

TUTransitionVertex :
	(from?='from' | to='to') vertex=[TUState|QualifiedName] ';'
		// feature 'to' is for error markers
;

TUTransitionEffect :
	effect='effect' body=XBlockExpression ';'?
		// feature 'effect' is for error markers
;

TUTransitionGuard :
	{TUTransitionGuard} // required because of the buggy formatter2 API
	guard='guard' '(' (else?='else' | expression=XExpression) ')' ';'?
		// feature 'guard' is for error markers
;

TUTransitionPort :
	portKeyword='port' port=[TUPort|QualifiedName] ';'
		// feature 'portKeyword' is for error markers
;

TUPort :
	behavior?='behavior'? 'port' name=ValidID '{'
		members+=TUPortMember*
	'}' ';'?
;

TUPortMember :
	(required?='required' | provided='provided') interface=[TUInterface|QualifiedName] ';'
		// feature 'provided' is for error markers
;

// Association-related

TUAssociationEnd :
	visibility=TUVisibility? notNavigable?='hidden'?
		multiplicity=TUMultiplicity? container?='container'?
		endClass=[TUClass|QualifiedName] name=ValidID ';'
;

TUMultiplicity :
	lower=INT (upperSet?='..' (upper=INT | upperInf?='*'))? | any?='*'
;

// Commons

enum TUVisibility :
	PACKAGE = 'package' | PRIVATE = 'private' | PROTECTED = 'protected' | PUBLIC = 'public'
;

// Actions

TUSendSignalExpression returns xbase::XExpression :
	{TUSendSignalExpression}
	'send' signal=XExpression 'to' target=XExpression
;

TUDeleteObjectExpression returns xbase::XExpression :
	{TUDeleteObjectExpression}
	'delete' object=XExpression
;

TUSignalAccessExpression returns xbase::XExpression :
	{TUSignalAccessExpression}
	trigger='trigger'
		// feature 'trigger' is for error markers
;

TUStatementSemicolonNotNeeded returns xbase::XExpression
	: XIfExpression
	| XForLoopExpression
	| XBasicForLoopExpression
	| XWhileExpression
	| XSwitchExpression
	| XBlockExpression
	| XVariableDeclaration // semicolon included in rule
;

TUStatementSemicolonNeeded returns xbase::XExpression
	: XReturnExpression
	| XDoWhileExpression
	| XExpression
	| TUSendSignalExpression
	| TUDeleteObjectExpression
;

// Overridden Xbase rules

/*
 * Changes:
 * <ul>
 *     <li>
 *         Removed:
 *         <ul>
 *             <li>XCollectionLiteral</li>
 *             <li>XClosure</li>
 *             <li>XTypeLiteral</li>
 *         </ul>
 *     </li>
 * </ul>
 */
XLiteral returns xbase::XExpression
	: XBooleanLiteral
	| XNumberLiteral
	| XNullLiteral
	| XStringLiteral
;

/*
 * Changes:
 * <ul>
 *     <li>
 *         Removed: 
 *         <ul>
 *             <li>XBlockExpression</li>
 *             <li>XSwitchExpression</li>
 *             <li>XSynchronizedExpression</li>
 *             <li>XIfExpression</li>
 *             <li>XForLoopExpression</li>
 *             <li>XBasicForLoopExpression</li>
 *             <li>XWhileExpression</li>
 *             <li>XDoWhileExpression</li>
 *             <li>XThrowExpression</li>
 *             <li>XReturnExpression</li>
 *             <li>XTryCatchFinallyExpression</li>
 *         </ul>
 *     </li>
 *     <li>
 *         Added:
 *         <ul>
 *             <li>TUSignalAccessExpression</li>
 *         </ul>
 *     </li>
 * </ul>
 */
XPrimaryExpression returns xbase::XExpression
	: XConstructorCall
	| XFeatureCall
	| XLiteral
	| XParenthesizedExpression
	| TUSignalAccessExpression
;

/*
 * Changes:
 * <ul>
 *     <li>at most one "simple" type argument</li>
 *     <li>parentheses are mandatory</li>
 *     <li>no XShortClosure in arguments</li>
 *     <li>no XClosure after the parameter list</li>
 * </ul>
 */
XConstructorCall returns xbase::XExpression :
	{xbase::XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] (
		=>'<' typeArguments+=JvmSimpleTypeReference '>'
	)?
	=>explicitConstructorCall?='(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')'
;

/*
 * Changes:
 * <ul>
 *     <li>restructured contained expressions</li>
 * </ul>
 */
XBlockExpression returns xbase::XExpression : 
	{xbase::XBlockExpression}
	'{' 
		(expressions+=TUStatementSemicolonNotNeeded | =>(expressions+=TUStatementSemicolonNeeded) ';' )*
			// don't change the syntactic predicate here, it would break the grammar
	'}'
;

/* 
 * Changes:
 * <ul>
 *     <li>body is an XBlockExpression instead of an XExpression</li>
 * </ul>
 */
XWhileExpression returns xbase::XExpression :
	{xbase::XWhileExpression}
	'while' '(' predicate=XExpression ')'
		body=XBlockExpression
;

/* 
 * Changes:
 * <ul>
 *     <li>body is an XBlockExpression instead of an XExpression</li>
 * </ul>
 */
XDoWhileExpression returns xbase::XExpression :
	{xbase::XDoWhileExpression}
	'do'
		body=XBlockExpression
	'while' '(' predicate=XExpression ')'
;

/*
 * Changes:
 * <ul>
 *     <li>no closures after parentheses</li>
 *     <li>no type parameters</li>
 * </ul>
 */
XFeatureCall returns xbase::XExpression :
	{xbase::XFeatureCall}
	feature=[types::JvmIdentifiableElement|IdOrSuper] (
		=>explicitOperationCall?='(' (
			  featureCallArguments+=XShortClosure
			| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? ')'
	)?
;

/*
 * Changes:
 * <ul>
 *     <li>XBlockExpression is mandatory, except for an "else if" construct</li>
 * </ul>
 */
XIfExpression returns xbase::XExpression :
	{xbase::XIfExpression}
	'if' '(' if=XExpression ')'
		then=XBlockExpression
	(=>'else' else=(XIfExpression | XBlockExpression))?
;

/*
 * Changes:
 * <ul>
 *     <li>JvmFormalParameter -> FullJvmFormalParameter (type is mandatory)</li>
 *     <li>XBlockExpression is mandatory</li>
 * </ul>
 */
XForLoopExpression returns xbase::XExpression :
	=>({xbase::XForLoopExpression}
	'for' '(' declaredParam=FullJvmFormalParameter ':') forExpression=XExpression ')'
		eachExpression=XBlockExpression
;

/*
 * Changes:
 * <ul>
 *     <li>no variable declaration allowed</li>
 *     <li>parentheses are mandatory</li>
 *     <li>default has to be a block</li>
 * </ul>
 */
XSwitchExpression returns xbase::XExpression :
	{xbase::XSwitchExpression}
	'switch' '(' switch=XExpression ')' '{'
		cases+=XCasePart*
		('default' ':' default=XBlockExpression)?
	'}'
;

/*
 * Changes:
 * <ul>
 *     <li>removed type guards (thus 'case' is mandatory)</li>
 *     <li>then attribute can only be a block</li>
 * </ul>
 */
XCasePart returns xbase::XCasePart :
	{xbase::XCasePart}
	'case' case=XExpression (':' then=XBlockExpression | fallThrough?=',')
;

/*
 * Changes:
 * <ul>
 *     <li>only one init and update expression is allowed</li>
 *     <li>XBlockExpression is mandatory</li>
 * </ul>
 */
XBasicForLoopExpression returns xbase::XBasicForLoopExpression : 
	{xbase::XBasicForLoopExpression}
	'for' '(' (initExpressions+=XExpression ';' | initExpressions+=XVariableDeclaration | ';') 
		expression=XExpression? ';' updateExpressions+=XExpression? ')'
			eachExpression=XBlockExpression
;

/*
 * Changes:
 * <ul>
 *     <li>removed 'var' and 'val' keywords</li>
 *     <li>type is mandatory</li>
 * </ul>
 */
XVariableDeclaration returns xbase::XExpression :
	=>({xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID)
		('=' right=XExpression)? writeable?=';'
;

/*
 * Changes:
 * <ul>
 *     <li>only delegates to XAdditiveExpression</li>
 * </ul>
 */
XOtherOperatorExpression returns xbase::XExpression :
	XAdditiveExpression
;

/*
 * Changes:
 * <ul>
 *     <li>no nullsafe feature call keyword</li>
 *     <li>no type arguments for features</li>
 *     <li>no closure after parenthesis</li>
 *     <li>added class property access expression</li>
 * </ul>
 */
XMemberFeatureCall returns xbase::XExpression :
	XPrimaryExpression
	(
		=>(
			{xbase::XAssignment.assignable=current} ('.' | explicitStatic?='::')
			feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign
		)
		value=XAssignment
	| 
		=>(
			{xbase::XMemberFeatureCall.memberCallTarget=current} ('.' | explicitStatic?='::')
		) 
		feature=[types::JvmIdentifiableElement|IdOrSuper] (
			=>explicitOperationCall?='(' (
				  memberCallArguments+=XShortClosure
				| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
			)? ')'
		)?
	| 
		=>({TUClassPropertyAccessExpression.left=current} arrow='->') '('
			// feature 'arrow' is for error markers
			right=[TUClassProperty|QualifiedName]?
		')'
	)*
;

// New Xtype rules

JvmSimpleTypeReference returns types::JvmParameterizedTypeReference :
	{types::JvmParameterizedTypeReference} type=[types::JvmType|QualifiedName]
;

// Overridden Xtype rules

/*
 * Changes:
 * <ul>
 *     <li>
 *         Removed:
 *         <ul>
 *             <li>JvmGenericArrayTypeReference</li>
 * 	           <li>XFunctionTypeRef</li>
 *         </ul>
 *     </li>
 *     <li>
 *         Added:
 *         <ul>
 *             <li>JvmSimpleTypeReference</li>
 *         </ul>
 *     </li>
 * </ul> 
 */
JvmTypeReference returns types::JvmTypeReference :
	JvmParameterizedTypeReference | JvmSimpleTypeReference
;

/*
 * Changes:
 * <ul>
 *     <li>exactly one "simple" type argument</li>
 * </ul>
 */
JvmParameterizedTypeReference returns types::JvmParameterizedTypeReference :
	=>(type=[types::JvmType|QualifiedName] '<') arguments+=JvmSimpleTypeReference '>'
;

/*
 * Changes:
 * <ul>
 *     <li>removed extension imports</li>
 * </ul>
 */
XImportDeclaration returns xtype::XImportDeclaration : 
	'import' (
		(static?='static' importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID)) 
		| importedType=[types::JvmDeclaredType|QualifiedName] 
		| importedNamespace=QualifiedNameWithWildcard) ';'?
;
