/*
 * generated by Xtext 2.10.0
 */
package hu.elte.txtuml.xd.tests.parser

import com.google.inject.Inject
import hu.elte.txtuml.xd.xDiagramDefinition.XDModel
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import hu.elte.txtuml.xd.xDiagramDefinition.XDDiagram
import org.eclipse.xtext.xtype.XImportSection
import hu.elte.txtuml.xd.xDiagramDefinition.XDPackageDeclaration
import org.eclipse.xtext.common.types.JvmGenericType
import hu.elte.txtuml.xd.xDiagramDefinition.XDBinaryListInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.XDPhantomInstruction
import java.util.List
import hu.elte.txtuml.xd.xDiagramDefinition.XDUnaryListInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.XDGroupInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.XDUnaryNumberInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.XDPriorityInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.XDDiamondInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.XDWrappedTypeExpressionList
import hu.elte.txtuml.xd.xDiagramDefinition.XDWrappedTypeExpression
import hu.elte.txtuml.xd.xDiagramDefinition.XDArgumentExpressionList
import hu.elte.txtuml.xd.xDiagramDefinition.XDWrappedNumericExpression
import hu.elte.txtuml.xd.xDiagramDefinition.XDWrappedIntegralExpression
import hu.elte.txtuml.xd.tests.XDiagramDefinitionInjectorProvider

@RunWith(XtextRunner)
@InjectWith(XDiagramDefinitionInjectorProvider)
public class XDiagramDefinitionParsingTest{

	@Inject
	ParseHelper<XDModel> parseHelper
	
	extension XDiagramDefinitionParsingTestUtils utils = new XDiagramDefinitionParsingTestUtils;

	@Test
	def public void loadModel() {
		val result = parseHelper.parse('''
		package;
		''')
		Assert.assertNotNull(result)
	}
	
	@Test
	def public void loadPackage(){
		val result = parseHelper.parse('''
		package x.y.z;
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.findElement("package", XDPackageDeclaration));
		Assert.assertEquals("x.y.z", result.findElement("package.name", String));
	}
	
	@Test
	def public void loadImports(){
		val result = parseHelper.parse('''
		import java.lang.String
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.findElement("imports", XImportSection));
	}
	
	@Test
	def public void loadClassDiagram() {
		val result = parseHelper.parse('''
		class-diagram Test {}
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.findElement("diagram", XDDiagram));
		Assert.assertEquals("Test", result.findElement("diagram.name", String));
		Assert.assertEquals("class-diagram", result.findElement("diagram.diagramType", String));
	}
	
	@Test
	def public void loadStateMachineDiagram() {
		val result = parseHelper.parse('''
		state-machine-diagram Test for Machine {}
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.findElement("diagram", XDDiagram));
		Assert.assertNotNull(result.findElement("diagram.genArg", JvmGenericType));
		Assert.assertEquals("Test", result.findElement("diagram.name", String));
		Assert.assertEquals("state-machine-diagram", result.findElement("diagram.diagramType", String));
	}
	
	@Test
	def public void loadBinaryIdentifierInstruction() {
		val result = wrapClassDiagram('''
		A left-of B;
		A right-of C;
		A above D;
		A below E; 
		''');
		Assert.assertEquals("left-of", result.findElement("instructions.0.wrapped.op", String));
		Assert.assertEquals("right-of", result.findElement("instructions.1.wrapped.op", String));
		Assert.assertEquals("above", result.findElement("instructions.2.wrapped.op", String));
		Assert.assertEquals("below", result.findElement("instructions.3.wrapped.op", String));

		Assert.assertNotNull(result.findElement("instructions.0.wrapped.val.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.0.wrapped.of.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.1.wrapped.val.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.1.wrapped.of.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.2.wrapped.val.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.2.wrapped.of.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.3.wrapped.val.wrapped.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.3.wrapped.of.wrapped.name", JvmGenericType));
	}
	
	@Test
	def public void loadBinaryListInstruction(){
		val result = wrapClassDiagram('''
		A east-of B;
		A, B west-of C, D;
		A start north-of D;
		A end south-of E; 
		''');
		
		result.findElement("instructions", List).forEach[
			Assert.assertNotNull(findElement("wrapped", XDBinaryListInstruction));
		]
		
		Assert.assertEquals("east-of", result.findElement("instructions.0.wrapped.op", String));
		Assert.assertEquals("west-of", result.findElement("instructions.1.wrapped.op", String));
		Assert.assertEquals("north-of", result.findElement("instructions.2.wrapped.op", String));
		Assert.assertEquals("south-of", result.findElement("instructions.3.wrapped.op", String));

		Assert.assertNotNull(result.findElement("instructions.0.wrapped.val.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertNull(result.findElement("instructions.0.wrapped.linkEnd", String));
		Assert.assertNotNull(result.findElement("instructions.0.wrapped.of.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.1.wrapped.val.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertNull(result.findElement("instructions.1.wrapped.linkEnd", String));
		Assert.assertNotNull(result.findElement("instructions.1.wrapped.of.wrapped.expressions.1.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.1.wrapped.val.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.1.wrapped.of.wrapped.expressions.1.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.2.wrapped.val.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertEquals("start", result.findElement("instructions.2.wrapped.linkEnd", String));
		Assert.assertNotNull(result.findElement("instructions.2.wrapped.of.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertNotNull(result.findElement("instructions.3.wrapped.val.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertEquals("end", result.findElement("instructions.3.wrapped.linkEnd", String));
		Assert.assertNotNull(result.findElement("instructions.3.wrapped.of.wrapped.expressions.0.name", JvmGenericType));
	}
	
	@Test
	def public void loadPhantomInstruction(){
		val result = wrapClassDiagram('''
		phantom Ph;
		''');
		Assert.assertNotNull(result.findElement("instructions.0.wrapped", XDPhantomInstruction));
		Assert.assertNotNull("Ph", result.findElement("instructions.0.wrapped.name", String));
	}
	
	@Test
	def public void loadUnaryListInstruction(){
		val result = wrapClassDiagram('''
		topmost A;
		leftmost A;
		rightmost A;
		bottommost A;
		row A;
		column A;
		show A, B, C, D;
		''');
		
		val instructionList = result.findElement("instructions", List);
		Assert.assertEquals(7, instructionList.size);
		instructionList.forEach[
			Assert.assertNotNull(findElement("wrapped", XDUnaryListInstruction));
			Assert.assertNotNull(findElement("wrapped.val.wrapped.expressions.0.name", JvmGenericType));			
		]
		Assert.assertEquals(4, instructionList.get(6).findElement("wrapped.val.wrapped.expressions", List).size)
	}
	
	@Test
	def public void loadGroupInstruction(){
		var result = wrapClassDiagram('''
		group G of A, B, C;
		''').findElement("instructions.0.wrapped", XDGroupInstruction);
		
		Assert.assertNotNull(result);
		Assert.assertEquals("group", result.op);
		Assert.assertEquals(3, result.^val.wrapped.expressions.size);
		Assert.assertEquals("G", result.name);
	}
	
	@Test
	def public void loadUnaryNumberInstruction(){
		var result = wrapClassDiagram('''
		spacing 42%;
		spacing 42;
		''');
		
		val instructionList = result.findElement("instructions", List);
		Assert.assertEquals(2, instructionList.size);
		instructionList.forEach[
			Assert.assertNotNull(findElement("wrapped", XDUnaryNumberInstruction));
			Assert.assertEquals("42", findElement("wrapped.val.wrapped.value", String));			
		]
	}
	
	@Test
	def public void loadPriorityInstruction(){
		var result = wrapClassDiagram('''
		priority 42 for X, Y;
		''').findElement("instructions.0.wrapped", XDPriorityInstruction);
		
		Assert.assertNotNull(result);
		Assert.assertNotNull(result.findElement("val.wrapped.expressions.0.name", JvmGenericType));
		Assert.assertEquals("priority", result.op);
		Assert.assertEquals(42, result.findElement("prior.wrapped") as Integer);
	}
	
	@Test
	def public void loadDiamondInstruction(){
		var result = wrapClassDiagram('''
		diamond top: A, right: B, bottom: C, left: D; 
		''').findElement("instructions.0.wrapped", XDDiamondInstruction);

		Assert.assertNotNull(result);
		Assert.assertEquals("diamond", result.op);
		Assert.assertEquals(4, result.args.wrapped.expressions.size);
		result.args.wrapped.expressions.forEach[
			Assert.assertNotNull(findElement("argName", String))
			Assert.assertNotNull(findElement("expression.name", JvmGenericType))
		]
	}
	
	@Test
	def public void loadWrappedTypeExpressionList(){
		#["show {A, phantom, C};", "show A, phantom, C"].forEach[
			val parsed = wrapClassDiagram.findElement("instructions.0.wrapped.val", XDWrappedTypeExpressionList);
			Assert.assertNotNull(parsed);
			Assert.assertNotNull(parsed.wrapped);
			Assert.assertEquals(3, parsed.wrapped.expressions.size);	
			Assert.assertNotNull(parsed.wrapped.expressions.get(0).name);
			Assert.assertNull(parsed.wrapped.expressions.get(0).phantom);
			Assert.assertNull(parsed.wrapped.expressions.get(1).name);
			Assert.assertEquals("phantom", parsed.wrapped.expressions.get(1).phantom);
			Assert.assertNotNull(parsed.wrapped.expressions.get(2).name);
			Assert.assertNull(parsed.wrapped.expressions.get(2).phantom);
		]
	}
	
	@Test
	def public void loadWrappedTypeExpression(){
		#["A below phantom;", "{A} below {phantom}"].forEach[
			val value = wrapClassDiagram.findElement("instructions.0.wrapped.val", XDWrappedTypeExpression);
			Assert.assertNotNull(value);
			Assert.assertNotNull(value.wrapped);
			Assert.assertNotNull(value.wrapped.name);
			Assert.assertNull(value.wrapped.phantom);
			
			val of = wrapClassDiagram.findElement("instructions.0.wrapped.of", XDWrappedTypeExpression);
			Assert.assertNotNull(of);
			Assert.assertNotNull(of.wrapped);
			Assert.assertNull(of.wrapped.name);
			Assert.assertEquals("phantom", of.wrapped.phantom);
		]
	}
	
	@Test
	def public void loadWrappedArgumentExpressionList(){
		#["diamond top:A, B, C, phantom;", 
		"diamond top:A, right:B, bottom:C, left:phantom;", 
		"diamond {top:A, B, C, phantom};",
		"diamond {top:A, right:B, bottom:C, left:phantom};"].forEach[
			val expList = wrapClassDiagram.findElement("instructions.0.wrapped.args.wrapped", XDArgumentExpressionList);

			Assert.assertEquals("top", expList.expressions.get(0).argName);
			Assert.assertEquals(4, expList.expressions.size);
			Assert.assertNotNull(expList.expressions.get(0).expression.name);
			Assert.assertNull(expList.expressions.get(0).expression.phantom);
			Assert.assertNotNull(expList.expressions.get(1).expression.name);
			Assert.assertNull(expList.expressions.get(1).expression.phantom);
			Assert.assertNotNull(expList.expressions.get(2).expression.name);
			Assert.assertNull(expList.expressions.get(2).expression.phantom);
			Assert.assertNull(expList.expressions.get(3).expression.name);
			Assert.assertEquals("phantom", expList.expressions.get(3).expression.phantom);
		]
	}
	
	@Test
	def public void loadWrappedNumericExpression(){
		#["spacing 42;", "spacing 42%;", "spacing 42.0;", "spacing 42.0%;"].forEach[
			val parsed = wrapClassDiagram.findElement("instructions.0.wrapped.val", XDWrappedNumericExpression);
			Assert.assertNotNull(parsed);
			Assert.assertNotNull(parsed.wrapped);
			Assert.assertNotNull(parsed.wrapped.value);
			Assert.assertTrue("42".equals(parsed.wrapped.value) || "42.0".equals(parsed.wrapped.value));
			Assert.assertTrue("%".equals(parsed.wrapped.perc) || parsed.wrapped.perc == null);
		]
	}
	
	@Test
	def public void loadWrappedIntegralExpression(){
		#["priority 42 for X;", "priority {42} for X;"].forEach[
			val parsed = wrapClassDiagram.findElement("instructions.0.wrapped.prior", XDWrappedIntegralExpression);
			Assert.assertNotNull(parsed);
			Assert.assertEquals(42, parsed.wrapped);
		]
	}

	// helper function to load instructions	
	def private wrapClassDiagram(String contents){
		parseHelper.parse("class-diagram Test {" + contents + "}").findElement("diagram", XDDiagram);
	}
}
